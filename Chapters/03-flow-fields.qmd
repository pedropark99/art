
# Introducing Flow Fields {#sec-flow-fields}

Flow fields are one of the most iconic and powerful techniques used
in generative art. The essential idea behind a flow field
is to create a grid of angles. When a object moves through
this grid, it follows the direction of the angle that
is stored in the current position that this object is
on the grid [@hobbsflow].

```{r}
#| include: false
library(tidyverse)
```


In other words, by having a grid of angles as the basis,
we basically pick a starting point somewhere
in this grid, then, we start walking through this grid, by taking
small steps in the direction of the angle that we are currently
seeing. We walk as much as we much as we want/need to.


You could also understand flow fields as a very powerful way
of creating interesting curves and paths.
If your art involves these types of elements, you might want to use
a flow field.


## Building the grid

Let's start by creating the grid of angles. Since we are talking
about a 2D grid, with x and y coordinates, we want to store
this grid either as a 2D matrix, or, as a `tibble` with
x and y columns. To do that, you
could use the exact same techniques as we used at
@sec-two-dimensions-random, to build a 2D matrix or a `tibble`
to store two dimensional random values.

In essence, if you prefer to build the 2D matrix, you could simply pass the vector
with all the angles values in the grid to the `matrix()`,
and specifying the number of columns and rows that you want to use.

In the other hand, if you prefer the `tibble` instead, 
which was to use `rep()` in conjunction with `seq_len()` to
build the x and y coordinates columns in the `tibble`.
The function `build_grid_df()` below summarizes this technique:

```{r}
library(tibble)
build_grid_df <- function(angles, n) {
  tibble(
    x = rep(seq_len(n), each = n),
    y = rep(seq_len(n), times = n),
    value = angles |> as.vector()
  )
}
```


### Building a fixed angle grid

Let's start by building a grid with a fixed angle.
This means that all coordinates in the grid will
have the exact same angle value. So the angle is
"fixed", or "constant" across the grid.

To build such a grid, simply use a constant value
across your matrix or `tibble`. In the example
below, we are creating a 100x100 grid filled
with the angle $\pi/4$.

```{r}
n <- 100
fixed_angle <- pi / 4
grid <- build_grid_df(fixed_angle, n)
grid
```

But how can we can visualize this grid of angles? Well...
we can draw $100^2$ small lines with this same particular angle,
and then, we spread all of these lines
across the grid, using a translation operation
as we presented at @sec-translation.

So, all we have to do, is to draw $100^2$ lines that are identical
(same length, same angle), and then, you apply a translation
to move each individual line to a particular point in the grid.
Like that:

```{r}
library(tidyverse)

visualize_grid <- function(grid, n){
  # Calculate the n^2 lines
  grid <- grid %>% 
    mutate(
      line_id = seq_len(nrow(grid)),
      x_line = map(value, \(x) c(0, cos(x))),
      y_line = map(value, \(y) c(0, sin(y))),
    ) %>% 
    unnest(c(x_line, y_line))
  
  # Spread the lines across the grid
  grid <- grid %>% 
    mutate(
      x = x + x_line,
      y = y + y_line
    )
  
  # Plot these lines
  pl <- ggplot(grid) +
    geom_path(aes(x, y, group = line_id)) +
    coord_cartesian(
      xlim = c(0,n), ylim = c(0,n)
    ) +
    theme_void()
  
  print(pl)
}


visualize_grid(grid, n)
```

You can see in the output above, that all lines are in the same angle.
But a flow field with constant angle values is kind of useless.
So let's level up this game.




### Building a random angle grid

Now, we can add a little bit of randomness to this field,
by using random angle values. First, we generate $100^2$
random values with `runif()`.

However, we need to scale these random values. By default,
`runif()` generates random values that are between 0 and 1.
As a consequence, you can use these values as percentages
(from 0% to 100%) to transport these values into a different
scale.

The radians scale goes from $-2\pi$ to $2\pi$, but let's
consider solely counter-clockwise movements, which
limits the scale to positive values (from zero to $2\pi$).
So we can multiply the random values from `runif()` with
$2\pi$, to transport these random values into the radians scale.

After that, we spread these random angle values into a grid
with the `build_grid_df()` function we created before:

```{r}
set.seed(50)
angles <- runif(n ^ 2) * 2 * pi
grid <- build_grid_df(angles, n)
```

Now that we have the grid of angles, all we have to do is to visualize it,
with the `visualize_grid()` function that we created in the previous section.

And yeah... this field is a mess, because we now have $100Â²$ lines with
completely random angles. This field might be interesting to
be a soft pattern in the background of your image. But nothing
much more than that.

```{r}
visualize_grid(grid, n)
```





### Building an actual flow field with Perlin Noise

Ok, now lets take this 

```{r}
library(ambient)

set.seed(50)
angles <- noise_perlin(c(n, n)) * 2 * pi
grid <- build_grid_df(angles, n)
visualize_grid(grid, n)
```












