<!--
Stock prices are an example of chaos that exists in our economic system.
For example, if tomorrow, Microsoft suffers a huge lost of investments (because
of a wrong strategy, or some internal scandal, etc.), the stock prices
of Apple will most likely go up. Apple did not had do to
a thing! Its concurrent made a mistake, as a result, the price of its
stock raised "automatically", as a side-effect.

Also, huge and billionaire companies such as Apple have some degree of
control over their stock price. In other words, these companies can
inject huge amounts of money into the market, or, influence government decisions
to slightly influence the price of their stocks.
So when these big companies influence the market, we introduce
a new effect on the table.

Sometimes we can predict some of these effects,
specially if we have good sources of information inside the market.
But there are so many effects (both in quantity and in quality), that becomes impossible
to comprehend all of these effects at once, hence the "chaos feeling" that you feel
when you work with the stock market.

This is frustrating for humans. We want to comprehend everything we are seeing!
We want to know why, when, who and how everything happens.
But at the same time, we as humans have limited resources: a limit
amount of attention that we can spend, and limited brain processing power
that we can spend when learning/understanding about something.

That is why some degree of order, or symmetry, or logic in a image is very
pleasant to the eyes. Because is easy to understand a symmetric object.
We can easily understand what we are seeing in the image.

So when you are building your generative art, you want some degree of
chaos and randomness. But you also want to balance this chaos with some
degree of order. Hence the current chapter title (producing chaos in an ordered manner).
-->


# Producing chaos in an ordered manner

In this chapter, we will study more about how to produce chaos
with randomness. We will learn about the different types of
random number generators that are available in R, and we will also learn
about producing this randomness in one and two dimensions.

Chaos is, in general, a hard topic for us, programmers. Because
our job is the complete opposite of that. We work with
logic, precision, and computers. Chaos and randomness are not
part of our essence.

But a little taste of chaos is very essential to any generative art you may produce.
You could say that, generative art is mostly a synergy between chaos and order.
A big part of it comes from combining random patterns
we find in nature with the order and logic of math.
Because we use geometry and a lot of math to draw and mold shapes
in the screen, we use colors and color theory to make everything colorful and attractive,
and we also combine all of that with randomness to
achieve random patterns that are interesting to look
at.

That is why, in this chapter, I want to focus on how random values can
be generated in R, and what are the options available for you.


## About random seeds and random number generation

Computers can not generate "true random numbers". Instead, they use an
"initial state" as the basis for generating the random values.
That is why we usually say that computers can generate
"pseudo-random numbers".

They are "pseudo" in the sense that they are not truly random,
because they are based in a state that can be reproduced, if
we want to. But they are "random" still because they look
random enough for us, mere humans, and they do have some
component of randomness that are intrinsic to them.

But what is this "initial state", from which the random numbers
are generated? This "initial state" is usually represented as a single integer,
and it is called as the "seed for the random number generation", or simply, a "random seed".
So, to generate random numbers in R,
we use an integer as the "seed" to represent the initial state for the random
number generation.

In the example below, we can see that every time I run `runif()`,
I get a different answer as result, or a different set of random values:

```{r}
runif(3)
runif(3)
```

This happens because the "initial state" is different in each call to `runif()`.
Every time I run `runif()`, R automatically and randomly selects a seed for you.
That is why the results in the example above are different between
each call to `runif()`. Because the seeds used
in each call are different.

If we use the same "seed" as the initial state, we can produce
the exact same set of random numbers. That is,
if we want to **have reproducibility** in this process
of number generation, we need to use
the same random seed that was used before.

You can set the integer to be used as the random seed, by using the
`set.seed()` function.
In the example below, I am setting the random seed
to 40. Because of that, I get the exact same set of random values
in each call to `runif()`.

```{r}
set.seed(40)
runif(3)
set.seed(40)
runif(3)
```

This is very important! If you do not set your random seed, then,
you will never be able to reproduce the same set of random values, and,
as consequence, you will **never be capable of reproducing the same art again**,
or the same output in your generative art.

Let me repeat this. You should always explicitly set the random seed you are using in your process.
Because if do not, then, you are facing the risk of producing a very cool
output in your code by completely accident, and you loose the chance
to save this output in time, or to reproduce it later in the day,
or to improve it by adding more adjusts in configuration,
colors, brightness, and positions.


## Different types of generators {#sec-random-styles}

There are different types of generators available in R.
Each generator produces a sequence of random values following a specific
rule or target, and as a consequence of that, each one produces
a different type of randomness.

In base R, there are at least three generators that you must known for generative art:

- `runif()` produces random values that follow a uniform distribution;
- `rnorm()` produces random values that follow a normal distribution;
- `sample()` produces a random sample from a known set of values;

Both `runif()` and `rnorm()` functions can be used to generate a sequence of random numbers,
while the function `sample()` is used when you are trying to generate a random sample
from a known set of values.

There are other generators available in R that will be very useful for you in generative art,
specially trough the `ambient` R package[^ambient-pkg],
which is a R interface to the `FastNoise` C++ library.

This `ambient` package offers two other generators that will be discussed here,
which are:

- `ambient::noise_perlin()`: produces random values using the Perlin Noise algorithm.
- `ambient::noise_simplex()`: produces random values using the Simplex Noise algorithm.

[^ambient-pkg]: <https://ambient.data-imaginist.com/index.html>.

But these two generators from the `ambient` R package produces random values exclusively
for two to three dimensions. Because of that, they will be discussed in details only
at @sec-two-dimensions-random.


### Uniform distribution with `runif()`

The `runif()` function generates a sequence of random values
by following an uniform distribution. It basically means that
no specific number is favored during the generation process. Each
number have an equal amount of chance to be selected in the output.

You could say that `runif()` produces an output
that truly looks "random" in all aspects. Because nothing is unbalanced,
nothing is favored in detriment of the other,
and therefore, you cannot see any clear pattern in the result,
everything just looks... completely random.

By using a histogram, we can see this very balanced aspect of `runif()`.
In the output below, we can see that each range of numbers described
in the histogram appears in the output by an almost equal amount.
That is why the distribution is called "uniform".

```{r}
set.seed(532)
v <- runif(1000)
hist(v)
```

The function `runif()` have three arguments: 1) `n` - the number
of random values to be generated; 2) `min` - the minimum value that can be
generated; 3) `max` - the minimum value that can be generated.

You can use the `min` and `max` arguments to specify the range of values
that will be generated. If you use for example, `runif(10, min = 0, max = 50)`,
it means that R will generate 10 random values, ranging from 0 to 50.

```{r}
runif(10, min = 0, max = 50)
```


By default, the `min` and `max` arguments are configured to 0 and 1.
As a consequence, instead of explicitly setting these arguments, to
achieve a certain range of values, you can also use a factor to scale
the random values generated to the scale you want to. This means that,
the code `runif(10) * 50` is essentially the same thing that
setting `min` and `max` to 0 and 50.



### Normal distribution with `rnorm()`

While `runif()` follows a uniform distribution,
the `rnorm()` function generates a sequence of random values
by following a normal distribution instead.

This is a big difference, because it means that numbers that
are closer to the mean of the distribution will be selected more
often than others. This makes the output from `rnorm()` not so much
random as it is in `runif()`, because now, we have a clear pattern
(more numbers closer to the mean) present in the output.

We can use a histogram again to
see this pattern more clearly. You can
see in the output below that, numbers that
are closer to zero (which is the mean of the distribution)
appears more often than numbers that are further
apart, in the extremities of the distribution.

```{r}
set.seed(532)
v <- rnorm(1000)
hist(v)
```

The function `rnorm()` have three arguments: 1) `n` - the number
of random values to be generated; 2) `mean` - the mean value of the
distribution; 3) `sd` - the standard deviation of the value.


```{r}
rnorm(10, mean = 50, sd = 10)
```


You can use the `mean` argument to concentrate the random values around
a specific value of your preference. For example, if `mean = 50`, then,
the majority of random values generated will be close to 50.

With the `sd` argument you control how much the values distance from
the mean value of the distribution. If `sd` is very high, then
the distribution will be more spread, meaning that the values
will be, in general, more distant from the mean. If `sd` is low, then, the
inverse will happen.



### Taking a random sample with `sample()`

When you have a known and finite set of values, and you want
to randomly distribute them across your generative art, the function
`sample()` is the perfect candidate to help you in this task.

The function `sample()` have three arguments: 1) `x` -
and object that contains the set of values from which you want
to extract the sample; 2) `size` - the size of the sample,
i.e. how many elements will have in the output sample;
3) `replace` - the sample should be performed
with replacement?

The `replace` argument determines if each value in the object
`x` can be selected more than once in the output. In others words,
if a specific value is selected in the sample, can this value
be selected again over the next elements of the sample?
For the majority of cases, you will probably answer "yes"
to this question. So you normally set this argument to `TRUE`.
But this might not be your case, so you would have to set
this argument to `FALSE`.

I personally heavily use `sample()` to distribute
my color pallete across the elements of my image. Take the
code below as an example, I have 100 points in my plot, and
I want to randomly select a color from the `pallete` object
to each point. I can easily do that with `sample()`:

```{r}
library(ggplot2)
pallete <- c(
  "#8ecae6",
  "#219ebc",
  "#023047",
  "#ffb703",
  "#fb8500"
)

set.seed(50)
df <- data.frame(
  x = runif(100),
  y = runif(100)
)
df$color <- sample(
  pallete, size = 100, replace = TRUE
)

ggplot(df) +
  geom_point(
    aes(x, y, color = color),
    size = 3
  ) +
  scale_color_identity()
```



## Generating random values across two dimensions {#sec-two-dimensions-random}

On the previous sections, we were
generating random values in only one dimension, because we had
a single sequence of random values at hand. But you are not limited to that!
You can generate random values, and spread them across any dimensions you
want from the Cartesian plane.

Here in this section, we will discuss how to generate random values in
two dimensions (x and y axis) of the Cartesian plane.
The famous Perlin noise algorithmn is an example of generator that is mostly used to generate
random values in two dimensions.

Also, another hacky way of producing
random values in two dimensions is by using a sequence of
random values that was produced in one dimension, and dividing this sequence in two parts,
to get a smaller sequence for each dimension. In other words,
you build a sequence with $2n$ random values, then, divide it into two separate sequences,
each with $n$ random values. As a result, you get two sequences of random values,
one for each of the two dimensions in the Cartesian plane (x and y axis).



### The true randomness of `runif()`

```{r}
library(ggplot2)
build_df <- function(random_values, n){
  data.frame(
    col_id = rep(seq_len(n), each = n),
    row_id = rep(seq_len(n), times = n),
    value = random_values |> as.vector()
  )
}

n <- 100
set.seed(40)
random <- matrix(runif(n ^ 2), n, n)
d <- build_df(random, n)


ggplot(d) +
  geom_point(
    aes(x = col_id, y = row_id, color = value),
    size = 3
  ) +
  theme_void()
```

When we use `rnorm()`, it still produces a pretty random result. However,
we can see that the colors are more flat, they seem less random compared
to `runif()`. What is happening is that `rnorm()` outputs random values
based on a probabilistic distribution, or more specifically, based on
a mean value.

The end result of this, is that `rnorm()` tend to output values that
are closer to the mean of the probabilistic distribution. In the case
below, the mean value of the distribution is zero. So, the colors in
the image below seen more flat, because the majority of the values
sorted by `rnorm()` are values that are very close to zero.

Hence, what you see in the image below is still a collection of many random values.
But a big chunk of these random values are values that are very close to zero.
That is why most of the points in this image are in the middle of
the black and blue gradient scale.

```{r}
set.seed(40)
random <- matrix(rnorm(n ^ 2), n, n)
d <- build_df(random, n)

ggplot(d) +
  geom_point(
    aes(x = col_id, y = row_id, color = value),
    size = 3
  ) +
  theme_void()
```



```{r}
library(ambient)
random <- noise_perlin(c(n, n))
d <- build_df(random, n)

ggplot(d) +
  geom_point(
    aes(x = col_id, y = row_id, color = value),
    size = 3
  ) +
  theme_void()
```




