[
  {
    "objectID": "Chapters/01-transformations.html#introduction",
    "href": "Chapters/01-transformations.html#introduction",
    "title": "2  Introducing graphics transformations",
    "section": "2.1 Introduction",
    "text": "2.1 Introduction\nThere are three basic transformations that are essential to world of computer graphichs, which are:\n\nScaling.\nTranslation.\nRotation.\n\n\nlibrary(ggplot2)\ntriangle &lt;- data.frame(\n  x = c(-1, 1, 0),\n  y = c(0, 0, 1)\n)\n\nggplot(triangle) +\n  geom_polygon(\n    aes(x = x, y = y),\n    fill = \"#222222\"\n  )",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducing graphics transformations</span>"
    ]
  },
  {
    "objectID": "Chapters/01-transformations.html",
    "href": "Chapters/01-transformations.html",
    "title": "2  Introducing graphics transformations",
    "section": "",
    "text": "In computer graphics, our main objective is (usually) to display multiple shapes (or objects) in the computer screen. But, in order to do that, we might need to change some attributes of these shapes (or objects).\nFor example, we might need to move these shapes to different locations in the screen, or to scale these shapes to a different size, or maybe, to rotate them into a different angle. To do this, we apply a transformation to each shape (or object) that we want to display in the screen.\nThere are three basic transformations that are essential to world of computer graphics, which are:\n\nScaling.\nTranslation.\nRotation.\n\nEach of these three basic transformations use simple math operations over the coordinates of each vertice that compose your shape/object to achieve a specific visual effect/transformation. In essence:\n\nScaling is used to scale your object into a different size (i.e. to raise/shrink the size of your object).\nTranslation is used to move your object to a different position in the coordinate system.\nRotation is used to rotate your object to a different angle.\n\n\nlibrary(ggplot2)\ntriangle &lt;- data.frame(\n  x = c(-1, 1, 0),\n  y = c(0, 0, 2)\n)\n\ncanvas &lt;- ggplot() +\n  theme_minimal() +\n  lims(y = c(-5, 5), x = c(-5, 5)) +\n  geom_vline(aes(xintercept = 0), color = \"#222222\") +\n  geom_hline(aes(yintercept = 0), color = \"#222222\")\n\ncanvas +\n  geom_polygon(\n    aes(x = x, y = y),\n    fill = \"#5384d4\",\n    data= triangle\n  )",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducing graphics transformations</span>"
    ]
  },
  {
    "objectID": "Chapters/01-transformations.html#translation",
    "href": "Chapters/01-transformations.html#translation",
    "title": "2  Introducing graphics transformations",
    "section": "2.1 Translation",
    "text": "2.1 Translation\nLets begin with the easiest and simplest of all transformations, which is translation. A translation is used to move your object to a different position in the cartesian field.\nFigure 2.1 presents this transformation visually. The light blue rectangle represents the original position of the rectangle in the cartesian field. While the strong blue rectangle represents the position that the rectangle was moved after we applied the translation.\n\n\n\n\n\n\nFigure 2.1: An example of translating an object in a cartesian field\n\n\n\nBut how translation works? In summary, to translate an object, all you have to do is to add a “x offset” and a “y offset” to all vertices of your object. The “x offset” represents how much you want to move the object horizontally, while the “y offset” represents how much to move the object vertically.\nThe direction of the movement is determined by the fact if the offset you are adding is a positive or a negative number. For example, if you want to move your object to the right, then, you add a positive x offset to each x position. But if you want to move your object to the right instead, then, you add a negative x offset.\nFor example, a triangle have three vertices. If we want to translate this triangle three points to the left, and two points up, then, we need to add the number 3 to the x position, and the number 2 to the y position of each vertex of this triangle.\nThe following code demonstrates this idea. We have a first triangle (object triangle), represented by the vertices \\((-1,0), (1,0), (0,2)\\). Then, we create a new triangle (object translated_triangle) that is translated by adding the “x offset” and “y offset” to each x and y positions, respectively.\n\nlibrary(ggplot2)\ntriangle &lt;- data.frame(\n  x = c(-1, 1, 0),\n  y = c(0, 0, 2)\n)\n\nx_offset &lt;- 3\ny_offset &lt;- 2\ntranslated_triangle &lt;- data.frame(\n  x = triangle$x + x_offset,\n  y = triangle$y + y_offset\n)\n\ncanvas &lt;- ggplot() +\n  theme_minimal() +\n  lims(y = c(-1, 5), x = c(-1, 5)) +\n  geom_vline(aes(xintercept = 0), color = \"#222222\") +\n  geom_hline(aes(yintercept = 0), color = \"#222222\")\n\ncanvas +\n  geom_polygon(\n    aes(x = x, y = y, fill = \"Before translation\"),\n    data= triangle\n  ) +\n  geom_polygon(\n    aes(x = x, y = y, fill = \"After translation\"),\n    data= translated_triangle\n  ) +\n  scale_fill_manual(values = c(\"#226ce3\", \"#a6c8ff\"))\n\n\n\n\n\n\n\n\nSo, if you need to translate any object in your image, you always need to do the same thing, which is to add x and y offsets to each coordinate/vertex of your object.\nHowever, the way you do this can vary depending on the specific geom you are using in your plot. Because different geoms in ggplot2 can treat the vertices of your object very differently.\nFor example, you can draw rectangles by using geom_rect() or geom_tile(). But these geoms are completely different in the way they draw the actual rectangle. geom_rect() draws a rectangle by using the coordinates of the four corners (or vertices) of the rectangle. In contrast, geom_tile() draw a rectangle by using a single coordinate (which is the center of the rectangle), plus a width and height values for the rectangle.\nThat sad, if you needed to translate a rectangle drawn by the geom_rect() geom, then, you do the same logic as the previous code example. But, in the other hand, is your rectangle is drawn by the geom_tile() geom, then, all you need to do is to translate a single coordinate (or vertex), which is the center point of the rectangle.\n\nr &lt;- data.frame(\n  center_x = 0.5,\n  center_y = 0.25,\n  width = 1,\n  height = 0.5\n)\n\nx_offset &lt;- 3\ny_offset &lt;- 2\ntranslated_r &lt;- data.frame(\n  center_x = r$center_x + 3,\n  center_y = r$center_y + 2,\n  width = 1,\n  height = 0.5\n)\n\ncanvas +\n  geom_tile(\n    aes(x = center_x, y = center_x,\n        height = height, width = width,\n        fill = \"Before translation\"),\n    data = r\n  ) +\n  geom_tile(\n    aes(x = center_x, y = center_x,\n        height = height, width = width,\n        fill = \"After translation\"),\n    data = translated_r\n  ) +\n  scale_fill_manual(values = c(\"#226ce3\", \"#a6c8ff\"))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducing graphics transformations</span>"
    ]
  },
  {
    "objectID": "Chapters/01-transformations.html#scaling",
    "href": "Chapters/01-transformations.html#scaling",
    "title": "2  Introducing graphics transformations",
    "section": "2.2 Scaling",
    "text": "2.2 Scaling\nScaling is used to scale your object into a different size (i.e. to raise/shrink the size of your object). Figure 2.2 presents this process visually. We begin with the light blue and smaller triangle, and then, we scale this triangle into a bigger size, getting the strong blue triangle as a result.\n\n\n\n\n\n\nFigure 2.2: Scaling a triangle in to a bigger size\n\n\n\nTo scale an object, we perform essentially the same thing that we did in translation, which was a simple math operation over the coordinates of the vertices that compose our object. But instead of adding offsets to the coordinates, we multiply each coordinate by a fixed amount/factor.\nAs an example, lets create a new triangle with the coordinates \\((0,0), (1,0), (0,2)\\). We can get a triangle that is twice bigger by multiplying each coordinate by a factor of two.\n\ntriangle &lt;- data.frame(\n  x = c(0, 1, 0),\n  y = c(0, 0, 2)\n)\ntwice_triangle &lt;- data.frame(\n  x = triangle$x * 2,\n  y = triangle$y * 2\n)\n\ncanvas +\n  geom_polygon(\n    aes(x = x, y = y, fill = \"After scaling\"),\n    data= twice_triangle\n  ) +\n  geom_polygon(\n    aes(x = x, y = y, fill = \"Before scaling\"),\n    data= triangle\n  ) +\n  scale_fill_manual(values = c(\"#226ce3\", \"#a6c8ff\"))\n\n\n\n\n\n\n\n\nIf you want to scale your object, but at the same time, keep the same center position as the original object, then, we need to perform two transformations at once: scaling and translation. We first scale the object to the size we want, and then, we translate this object to the same center position as the original object. Take this case as an example:\n\ntriangle &lt;- data.frame(\n  x = c(0.25, 1.5, 0.5),\n  y = c(0.5, 0.5, 2)\n)\ntwice_triangle &lt;- data.frame(\n  x = (triangle$x * 2) - (max(triangle$x) / 2),\n  y = (triangle$y * 2) - (max(triangle$y) / 2)\n)\n\ncanvas +\n  geom_polygon(\n    aes(x = x, y = y, fill = \"After scaling\"),\n    data= twice_triangle\n  ) +\n  geom_polygon(\n    aes(x = x, y = y, fill = \"Before scaling\"),\n    data= triangle\n  ) +\n  scale_fill_manual(values = c(\"#226ce3\", \"#a6c8ff\"))\n\n\n\n\n\n\n\n\nSo all you need to do is to multiply each coordinate by the factor you want to scale the object. If you want a bigger object, then, the factor must be a number greater than 1. But if you want a smaller object instead, then, the factor must be a number between 0 and 1. If you want an object that is half the original size, you should use the factor is 0.5.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducing graphics transformations</span>"
    ]
  },
  {
    "objectID": "Chapters/01-transformations.html#rotation",
    "href": "Chapters/01-transformations.html#rotation",
    "title": "2  Introducing graphics transformations",
    "section": "2.3 Rotation",
    "text": "2.3 Rotation\nRotation is used to rotate your object to a different angle.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducing graphics transformations</span>"
    ]
  }
]